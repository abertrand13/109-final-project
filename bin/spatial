#!/usr/bin/env python

from argparse import ArgumentParser
import os, sys, datetime
import subprocess
from os.path import dirname, abspath

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def main():
  parser = ArgumentParser(description='SPATIAL', add_help=False)
  parser.add_argument('-h', '--help', action='store_true', default=False, dest='help')
  parser.add_argument('app', type=str, help='name of application to run')

  sbt_project = ''

  (opts, args) = parser.parse_known_args()

  if opts.help:
      #just copy paste scopt help
      print("""
spatial CLI for spatial
Usage: spatial [options]

  --help                   prints this usage text
      -n, --name <value>       name of the app [app]
      -q, --quiet              disable background logging
      -v, --verbose            enable verbose printout
      -c, --clean              Reset output directory
      -m, --multifile <value>  aggressiveness for splitting generated code files
      0 = no splitting or scoping
      1 = no splitting but yes scoping on inner pipes
      2 = no splitting but yes scoping everywhere
      3 <DEPRECATED> = splitting for inner pipes only
      4 = all blocks
      -o, --out <value>        location of output directory. Default is ./gen/<appname>
      -e, --emission <value>   Conservativeness when emitting nodes.
      0 = crash when emitNode is undefined (release mode)
      1 = warn when undefined
      2 = warn when undefined and report when node matched but outside backend rules
  --synth                  enable codegen to chisel + cpp (Synthesis) (disable sim) [false]
  --sim                    enable codegen to Scala (Simulation) (disable synth) [true]
  --fpga <value>           Set name of FPGA target [Default]
  --dse                    enables design space exploration [false]
      --naming                 generates the debug name for all syms, rather than "x${s.id}" only'
  --tree                   enables logging of controller tree for visualizing app structure
  --dot                    enables dot generation
      """)
      sys.exit(0)
  else:
      java_cmd = "sbt \"" + sbt_project + "run-main " + opts.app + " " + ' '.join(args) + "\""
  print(java_cmd)

  ecode = os.system(java_cmd)

  if ecode != 0:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Spatial compilation failed")

if __name__ == "__main__":
    main()
